// <auto-generated />
using System;
using DALByEFCore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DALByEFCore.Migrations
{
    [DbContext(typeof(EmployeesContext))]
    partial class EmployeesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DALByEFCore.Models.Customer", b =>
                {
                    b.Property<int>("CustId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustId"));

                    b.Property<string>("CustAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustCity")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("CustFax")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("CustName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustPhone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("EmpID");

                    b.HasKey("CustId")
                        .HasName("PK_Customer_tbl");

                    b.HasIndex("EmpId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DALByEFCore.Models.Employee", b =>
                {
                    b.Property<int>("Empid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("empid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Empid"));

                    b.Property<string>("Address")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("DateHire")
                        .HasColumnType("date");

                    b.Property<string>("Emptz")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("managerID");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Zip")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.HasKey("Empid")
                        .HasName("PK_Employee_tbl");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DALByEFCore.Models.EmployeeSalaryTbl", b =>
                {
                    b.Property<int>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("EmpID");

                    b.Property<DateOnly>("PeriodDate")
                        .HasColumnType("date");

                    b.Property<int?>("Bonus")
                        .HasColumnType("int");

                    b.Property<int?>("Payrate")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.HasKey("EmpId", "PeriodDate");

                    b.ToTable("EmployeeSalary_tbl", (string)null);
                });

            modelBuilder.Entity("DALByEFCore.Models.OrdersTbl", b =>
                {
                    b.Property<int>("Ordnum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ordnum"));

                    b.Property<int?>("CustId")
                        .HasColumnType("int")
                        .HasColumnName("CustID");

                    b.Property<DateOnly?>("Orddate")
                        .HasColumnType("date")
                        .HasColumnName("orddate");

                    b.Property<int?>("ProdId")
                        .HasColumnType("int")
                        .HasColumnName("ProdID");

                    b.Property<int?>("Qty")
                        .HasColumnType("int");

                    b.HasKey("Ordnum");

                    b.HasIndex("CustId");

                    b.HasIndex("ProdId");

                    b.ToTable("Orders_tbl", (string)null);
                });

            modelBuilder.Entity("DALByEFCore.Models.ProductsTbl", b =>
                {
                    b.Property<int>("ProdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProdID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProdId"));

                    b.Property<int?>("CostBuy")
                        .HasColumnType("int")
                        .HasColumnName("cost_buy");

                    b.Property<double>("CostSale")
                        .HasColumnType("float")
                        .HasColumnName("Cost_sale");

                    b.Property<string>("ProdDesc")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("QtyStock")
                        .HasColumnType("int")
                        .HasColumnName("qty_stock");

                    b.HasKey("ProdId");

                    b.ToTable("Products_tbl", (string)null);
                });

            modelBuilder.Entity("DALByEFCore.Models.Customer", b =>
                {
                    b.HasOne("DALByEFCore.Models.Employee", "Emp")
                        .WithMany("Customers")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_Customer_tbl_Employee_tbl");

                    b.Navigation("Emp");
                });

            modelBuilder.Entity("DALByEFCore.Models.EmployeeSalaryTbl", b =>
                {
                    b.HasOne("DALByEFCore.Models.Employee", "Emp")
                        .WithMany("EmployeeSalaryTbls")
                        .HasForeignKey("EmpId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeSalary_tbl_Employee_tbl");

                    b.Navigation("Emp");
                });

            modelBuilder.Entity("DALByEFCore.Models.OrdersTbl", b =>
                {
                    b.HasOne("DALByEFCore.Models.Customer", "Cust")
                        .WithMany("OrdersTbls")
                        .HasForeignKey("CustId")
                        .HasConstraintName("FK_Orders_tbl_Customer_tbl");

                    b.HasOne("DALByEFCore.Models.ProductsTbl", "Prod")
                        .WithMany("OrdersTbls")
                        .HasForeignKey("ProdId")
                        .HasConstraintName("FK_Orders_tbl_Products_tbl");

                    b.Navigation("Cust");

                    b.Navigation("Prod");
                });

            modelBuilder.Entity("DALByEFCore.Models.Customer", b =>
                {
                    b.Navigation("OrdersTbls");
                });

            modelBuilder.Entity("DALByEFCore.Models.Employee", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("EmployeeSalaryTbls");
                });

            modelBuilder.Entity("DALByEFCore.Models.ProductsTbl", b =>
                {
                    b.Navigation("OrdersTbls");
                });
#pragma warning restore 612, 618
        }
    }
}
